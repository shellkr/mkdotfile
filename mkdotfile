#!/bin/bash

old_ifs=$IFS
IFS=$'\012'

chk_init() {
	[[ ! -e "$HOME/.config/mkdotfile.conf" ]] && {
		printf "\nMissing file. You probably need to run 'mkdotfile init' first.\n\n"
		exit 1
	}

	dotfile_home="$(< $HOME/.config/mkdotfile.conf)"
}

git_init() {
	printf 'The first thing you have to do is to make a empty remote git repository using your service\n'
	printf 'providers web client. When that is done you can go ahead and insert the clone url below\n'
	read -ep "Enter your git repository clone url: " git_repo_url

	printf '\nNext, you have to enter a local directory where you want to store your files.\n'
	printf 'I recommend using something along the lines of ".dotfiles" with a dot in front.\n'
	printf "It will then go on and create that directory in the root of $HOME.\n"
	read -ep "Enter dotfile directory: " mk_dotfile_home

	# We have to extract the basename of the repo and add it to variable as git will create a
	# root dir for the git repo where the files later need to be stored.
	mk_dotfile_home="${mk_dotfile_home}/$(basename ${git_repo_url%.git})"

	[[ ! -d "$mk_dotfile_home" ]] && {
		printf "\n=> Creating directory...\n"
		mkdir -p "$HOME/${mk_dotfile_home%/*}"
		printf "=> Done. Your dotfiles will be found at $HOME/$mk_dotfile_home\n\n"
		echo "$HOME/$mk_dotfile_home" > $HOME/.config/mkdotfile.conf
	} || {
		printf "\n\n$HOME/${mk_dotfile_home%/*} already exist. Init aborted.\n"
		exit 1
	}

	git -C "$HOME/${mk_dotfile_home%/*}" clone "$git_repo_url"
	printf "\n= The init process has finnished =\n\n"
	exit 0
}

dot_track() {
	chk_init

	[[ -n "$2" ]] && {
		tracked_file="$2"
	} || {
		printf "Tracked files will be stored under $dotfile_home\n"
		read -ep "Enter full path to file you want to track: " tracked_file
	}

	# Remove leading and trailing whitespaces in filepath and if it is valid
	tracked_file="$(sed 's/^ *//;s/ *$//' <<<$tracked_file)"
	tracked_dir=$(dirname $(realpath -es "${tracked_file}"|sed "s%^$HOME%%"))

	[[ -d "$tracked_file" ]] && {
		printf "Tracking directories are currently not supported. Aborting.\n"
		exit 1
	}

#echo "dotfile_home: $dotfile_home"
#echo "tracked_file: $tracked_file"
#echo "tracked_dir: $tracked_dir"
	# make shadow directories, move and symlink back
	mkdir -p "${dotfile_home}${tracked_dir}"
	mv -n "${tracked_file}" "${dotfile_home}${tracked_dir}"
	ln -sf "${dotfile_home}${tracked_dir}/${tracked_file##*\/}" "${tracked_file}"
}

dot_untrack() {
        chk_init

        [[ -n "$2" ]] && {
                untrack_file="$2"
        } || {
		printf "This should be the symlink not the path of the actual file\n"
                read -ep "Enter full path of file you want to untrack: " untrack_file
        }

	# Remove leading and trailing whitespaces in filepath
	untrack_file="$(sed 's/^ *//;s/ *$//' <<<$untrack_file)"
echo "untrack_file: $untrack_file"
	mv "$(readlink -f $untrack_file)" "$untrack_file"
}

dot_restore() {
        chk_init

#        printf "This should be the real path of the actual file\n"
        read -ep "Enter full path of file you wish to restore: " remote_file
        read -ep "Enter full path to where you want to restore it: " restore_file

	# Remove leading and trailing whitespaces in filepath
	remote_file="$(sed 's/^ *//;s/ *$//' <<<$remote_file)"
	remote_file="$(realpath -e $remote_file)"
echo "remote_file: $remote_file"
echo "restore_file: $restore_file"
	ln -s "${remote_file}" "${restore_file}"
}

show_tree() {
	chk_init

        [[ -n "$2" ]] && {
                tree -DF "$2"
        } || {
		tree -DF "${dotfile_home}"
        }

}

git_push() {
	chk_init
	cd "${dotfile_home}"
	pwd
	git add -A
	git status
	echo
	read -p "Enter your commit message: " git_commit

	git commit -m "$git_commit"
	git push
	break
}

while true;
do
	case $1 in
		push)	 git_push ;;
		init)	 git_init ;;
		track)	 dot_track "$@"; break ;;
		untrack) dot_untrack "$@"; break ;;
		restore) dot_restore "$@"; break ;;
		tree) show_tree; break ;;
		*)	 printf "No valid option (init|track|push) entered... Shall therefore show the current status\n\n"
			 chk_init && git -C "${dotfile_home}" status
			 exit 1
		;;
	esac
done

IFS=$old_ifs
